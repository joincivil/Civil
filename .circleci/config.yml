version: 2

# What is this - http://yaml.org/type/merge.html
defaults: &defaults
  docker:
    - image: circleci/node:10.12.0-stretch

jobs:
    build:
        <<: *defaults
        steps:
            - checkout
            - restore_cache:
                name: Restore yarn cache
                key: node-modules-{{ checksum "yarn.lock" }}
            - run:
                name: Install modules
                command: yarn --frozen-lockfile install
            - save_cache:
                name: Save yarn cache
                key: node-modules-{{ checksum "yarn.lock" }}
                paths:
                    - node_modules
            - run:
                name: Building
                command:  yarn build
                no_output_timeout: 15m
            - run:
                name: Ensuring prettified
                command: yarn prettier
            - run:
                name: Linting
                command: yarn lint
            - run:
                name: Starting Ganache
                command: yarn ganache:raw
                background: true
            - run:
                name: Running migrations
                command: yarn lerna run --scope=@joincivil/contracts migrate:ganache
            - run:
                name: Running tests (except contracts)
                command: |
                    yarn test
            - add_ssh_keys:
                fingerprints:
                - "70:4a:4d:06:ec:1f:2a:fd:50:c6:a8:63:da:e9:0c:e6"
            - run:
                name: Releasing
                command: |
                    yarn release
    coverage:
        <<: *defaults
        steps:
            - attach_workspace:
                at: ../
            - run:
                name: Starting Ganache
                command: yarn ganache:raw
                background: true
            - run:
                name: Calculating coverage
                command: yarn coverage
            - run:
                name: Submitting coverage
                command: yarn coverage:submit

    # Docker steps
    # These steps have a different workspace roots and so will behave a bit differently
    # circleci/node has /users/circleci/project
    # civilmedia/gcloud-node has /root/project
    setup-gcp:
        <<: *defaults
        docker:
            - image: civilmedia/gcloud-node:latest
        steps:
            - run:
                name: Dump Google Cloud Credentials to file
                command: |
                    echo ${GOOGLE_AUTH} | base64 -d > ${HOME}/gcp-key.json
                    gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
                    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
                    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                    gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
                    gcloud docker --authorize-only
            - persist_to_workspace:
                root: /root
                paths:
                    - gcp-key.json
                    - .config/gcloud
                    - .docker
                    - .dockercfg
                    - .kubernetes_ns
                    - .kube

    # Adds specific test images so we can both push specific branches via circleci, but
    # also start up an fresh test container with the last test image in k8s
    push-test-containers:
        <<: *defaults
        docker:
            - image: civilmedia/gcloud-node:latest
        steps:
            - checkout
            - attach_workspace:
                at: /root
            - setup_remote_docker
            - run:
                name: Build Container
                command: |
                    TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
                    docker build -f Dockerfile-dapp . \
                    --build-arg version=$CIRCLE_SHA1 \
                    -t gcr.io/$GOOGLE_PROJECT_ID/dapp:$TAG \
                    -t gcr.io/$GOOGLE_PROJECT_ID/dapp:$TAG-$CIRCLE_SHA1 \
                    -t gcr.io/$GOOGLE_PROJECT_ID/dapp:test \
                    -t gcr.io/$GOOGLE_PROJECT_ID/dapp:test-$CIRCLE_SHA1
            - deploy:
                name: Push Containers to Registry
                command: |
                    gcloud config list
                    echo "pushing $GOOGLE_PROJECT_ID"
                    docker push gcr.io/$GOOGLE_PROJECT_ID/dapp

    push-containers:
        <<: *defaults
        docker:
            - image: civilmedia/gcloud-node:latest
        steps:
            - checkout
            - attach_workspace:
                at: /root
            - setup_remote_docker
            - run:
                name: Build Container
                command: |
                    TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
                    docker build -f Dockerfile-dapp . \
                    --build-arg version=$CIRCLE_SHA1 \
                    -t gcr.io/$GOOGLE_PROJECT_ID/dapp:$TAG \
                    -t gcr.io/$GOOGLE_PROJECT_ID/dapp:$TAG-$CIRCLE_SHA1
            - deploy:
                name: Push Containers to Registry
                command: |
                    gcloud config list
                    echo "pushing $GOOGLE_PROJECT_ID"
                    docker push gcr.io/$GOOGLE_PROJECT_ID/dapp

    deploy-test:
        <<: *defaults
        docker:
            - image: civilmedia/gcloud-node:latest
        steps:
            - attach_workspace:
                at: /root
            - deploy:
                name: Update Kubernetes Deployment on TEST
                command: |
                    TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
                    kubectl set image deployment/dapp dapp=gcr.io/$GOOGLE_PROJECT_ID/dapp:$TAG-$CIRCLE_SHA1 --namespace test

    deploy-staging:
        <<: *defaults
        docker:
            - image: civilmedia/gcloud-node:latest
        steps:
            - attach_workspace:
                at: /root
            - deploy:
                name: Update Kubernetes Deployment on STAGING
                command: |
                    kubectl set image deployment/dapp dapp=gcr.io/$GOOGLE_PROJECT_ID/dapp:master-$CIRCLE_SHA1 --namespace staging

    deploy-production:
        <<: *defaults
        docker:
            - image: civilmedia/gcloud-node:latest
        steps:
            - attach_workspace:
                at: /root
            - deploy:
                name: Update Kubernetes Deployment on PRODUCTION
                command: |
                    kubectl set image deployment/dapp dapp=gcr.io/$GOOGLE_PROJECT_ID/dapp:production-$CIRCLE_SHA1 --namespace production

workflows:
    version: 2
    build-and-deploy:
        jobs:
            - build:
                context: gcp-common
            - setup-gcp:
                context: gcp-common
                requires:
                    - build
                filters:
                    branches:
                        only:
                            - master
                            - production
                            - /test.*/
            - push-test-containers:
                context: gcp-common
                requires:
                    - setup-gcp
                filters:
                    branches:
                        only:
                            - /test.*/
            - push-containers:
                context: gcp-common
                requires:
                    - setup-gcp
                filters:
                    branches:
                        only:
                            - master
                            - production
            - deploy-test:
                context: gcp-common
                requires:
                    - push-test-containers
                filters:
                    branches:
                        only:
                            - /test.*/
            - deploy-staging:
                context: gcp-common
                requires:
                    - push-containers
                filters:
                    branches:
                        only:
                            - master
            - deploy-production:
                context: gcp-common
                requires:
                    - push-containers
                filters:
                    branches:
                        only:
                            - production
