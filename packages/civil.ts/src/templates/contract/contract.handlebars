/*
 * This file is auto-generated using abi-gen. Any changes will be reverted
 */

import BigNumber from "bignumber.js";
/* tslint:disable no-unused-variable */ // Needed for the promisifed events
import { Observable } from "rxjs";
/* tslint:enable no-unused-variable */
import "rxjs/add/operator/distinctUntilChanged";
import * as Web3 from "web3";
import { bindNestedAll, promisify } from "@joincivil/utils";

import { EthAddress, TxData, TxDataPayable, TxHash } from "../../types";
import { streamifyEvent } from "../../utils/contractutils";
import { Web3Wrapper } from "../../utils/web3wrapper";
import { BaseContract } from "../basecontract";
import { artifacts } from "./artifacts";

export class {{contractName}}Contract extends BaseContract {
  /* tslint:disable member-ordering */
  public static atUntrusted(web3Wrapper: Web3Wrapper, address: EthAddress): {{contractName}}Contract {
    const clazz = web3Wrapper.web3.eth.contract(artifacts.{{contractName}}.abi);
    return new {{contractName}}Contract(clazz.at(address));
  }

  {{> constructor}}

{{#each methods}}
  {{#this.constant}}
  {{> call contractName=../contractName}}
  {{/this.constant}}
  {{^this.constant}}
  {{> tx contractName=../contractName}}
  {{/this.constant}}

{{/each}}
  /* tslint:disable variable-name */
{{#each events}}
  {{> event contractName=../contractName}}

{{/each}}
  /* tslint:enable variable-name */

  private constructor(instance: Web3.ContractInstance) {
    super(instance);
    // Call methods access this instance while being in a sub-object, we're rebinding what
    // "this" means for everything in this class, this also requires "noImplicitThis" to be false
    bindNestedAll(this, ["constructor", "instance", "defaults"]);
  }
  /* tslint:enable member-ordering */
}

{{> event_types }}