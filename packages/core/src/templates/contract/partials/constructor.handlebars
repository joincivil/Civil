public static async singletonTrusted(ethApi: EthApi): Promise<{{contractName}}Contract|undefined> {
  if (!artifacts.{{contractName}}.networks) {
    debug("Trying to get singleton from contract without any singleton data");
    return undefined;
  }
  const networkId = (await currentNetwork(ethApi)).toString();
  const networkData = artifacts.{{contractName}}.networks[networkId];
  if (!networkData) {
    return undefined;
  }
  return {{contractName}}Contract.atUntrusted(ethApi, networkData.address);
}
public static atUntrusted(ethApi: EthApi, address: EthAddress): {{contractName}}Contract {
  const clazz = ethApi.getContractClass(artifacts.{{contractName}}.abi);
  return new {{contractName}}Contract(clazz.at(address));
}
// TODO(ritave): This code won't work with smart-contracts with library links
//               see [ch429] in Clubhouse
public static deployTrusted = {
  async sendTransactionAsync(
      ethApi: EthApi,
      {{> typed_inputs inputs=ctor.inputs }}
      txData?: TxData): Promise<string> {
    const options: TxData = {
      data: artifacts.{{contractName}}.bytecode,
      ...txData
    };
    if (!options.gas) {
      options.gas = await {{contractName}}Contract.deployTrusted
        .estimateGasAsync(
          ethApi,
          {{> params inputs=ctor.inputs }}
          options);
    }
    const txhash = await new Promise<string>((resolve, reject) => {
      const clazz = ethApi.getContractClass(artifacts.{{contractName}}.abi);
      /* There's a bug in Metamask, this callback should be called twice, first when the transaction
       * gets into mempool, and second when it's mined. But it's called only once, so we have to resolve
       * the contract on our own
       */
      clazz.new(
        {{> params inputs=ctor.inputs}}
        options,
        (err: any, instance: Web3.ContractInstance) => {
          if (err) {
            return reject(err);
          }
          return resolve(instance.transactionHash);
        });
    });
    return txhash;
  },
  async estimateGasAsync(
      ethApi: EthApi,
      {{> typed_inputs inputs=ctor.inputs }}
      txData?: TxData): Promise<number> {
    const options: TxData = {
      ...txData,
      data: artifacts.{{contractName}}.bytecode
    }
    const clazz = ethApi.getContractClass(artifacts.{{contractName}}.abi);
    const contractData = ((clazz.new) as any).getData(
      {{> params inputs=ctor.inputs}}
      options);
    return ethApi.estimateGas({data: contractData});
  },
};
