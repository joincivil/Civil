public static async singletonTrusted(ethApi: EthApi): Promise<{{contractName}}Contract|undefined> {
  if (!artifacts.{{contractName}}.networks) {
  debug("Trying to get singleton from contract without any singleton data");
  return undefined;
  }
  const networkId = (await currentNetwork(ethApi)).toString();
  const networkData = artifacts.{{contractName}}.networks[networkId];
  if (!networkData) {
  debug("Failed to find network data for network ID " + networkId + ". Supported networks: " +
  Object.keys(artifacts.{{contractName}}.networks));
  return undefined;
  }
  return {{contractName}}Contract.atUntrusted(ethApi, networkData.address);
  }
  public static atUntrusted(ethApi: EthApi, address: EthAddress): {{contractName}}Contract {
    const contract = ethApi.getContractClass(artifacts.{{contractName}}.abi, address);
    return new {{contractName}}Contract(contract, ethApi);
  }
  // TODO(ritave): This code won't work with smart-contracts with library links
  // see [ch429] in Clubhouse
  public static deployTrusted = {
  async sendTransactionAsync(
  ethApi: EthApi,
  {{> typed_inputs inputs=ctor.inputs }}
  options: SendOptions): Promise<string> {
    if (!options.gas) {
    options.gas = await {{contractName}}Contract.deployTrusted
    .estimateGasAsync(
    ethApi,
    {{> params inputs=ctor.inputs }}
    );
    }
    if (!options.gasPrice) {
      options.gasPrice = (await ethApi.getGasPrice()).toString();
    }
    const clazz = ethApi.getContractClass(artifacts.{{contractName}}.abi);


    return new Promise( (resolve, reject) => {
      /* There's a bug in Metamask, this callback should be called twice, first when the transaction
      * gets into mempool, and second when it's mined. But it's called only once, so we have to resolve
      * the contract on our own
      */
      const tx = clazz.deploy({data: artifacts.{{contractName}}.bytecode, arguments: [{{> params inputs=ctor.inputs}}]}).send(options);

      return tx.once("transactionHash", resolve)
    })


        },
        async estimateGasAsync(
        ethApi: EthApi,
        {{> typed_inputs inputs=ctor.inputs }}
        ): Promise<number> {
          const clazz = ethApi.getContractClass(artifacts.{{contractName}}.abi);
          const contractData = clazz.deploy({
            data: artifacts.{{contractName}}.bytecode, 
            arguments: [{{> params inputs=ctor.inputs}}]
          }).encodeABI();

          return ethApi.estimateGas({data: contractData});
          },
          };