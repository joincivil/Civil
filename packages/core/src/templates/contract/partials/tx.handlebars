public {{this.name}} = {
  async sendTransactionAsync(
    {{> typed_inputs inputs=inputs}}
    {{#this.payable}}
    txData?: TransactionConfig,
    {{/this.payable}}
    {{^this.payable}}
    txData?: TransactionConfig,
    {{/this.payable}}
  ): Promise<TxHash> {
    const self = this as {{contractName}}Contract;
    const txOptions: TransactionConfig = { ...self.configuration.txDefaults, ...txData };
    debug(`{{this.name}}({{>typed_inputs inputs=inputs}})`);
    debug("{{this.name}}: txOptions:", txOptions);
    debug("{{this.name}}: Sending with:",  {{> params inputs=inputs}}  );
    txOptions.to = self.instance.options.address;
    txOptions.data = self.instance.methods.{{this.name}}({{> params inputs=inputs}}).encodeABI();

    if (!isDefined(txOptions.gas)) {
      txOptions.gas = await self.ethApi.estimateGas(txOptions);
    }
    if (!isDefined(txOptions.gasPrice)) {
      const gasPricePromise = self.ethApi.getGasPriceString()
      txOptions.gasPrice = (await gasPricePromise).toString(); 
      debug("{{this.name}}: new gas price: ", txOptions.gasPrice);
    }

    return self.ethApi.sendTransaction(txOptions)
  },
  async estimateGasAsync(
    {{> typed_inputs inputs=inputs}}
    {{#this.payable}}
    txData?: TransactionConfig,
    {{/this.payable}}
    {{^this.payable}}
    txData?: TransactionConfig,
    {{/this.payable}}
  ): Promise<number> {
    const self = this as {{contractName}}Contract;
    const estimateGas = self.instance.methods.{{this.name}}({{> params inputs=inputs}}).estimateGas

    try {
      const estimate = Math.floor(await estimateGas(txData) * self.configuration.estimationMultiplier);
      debug("{{this.name}}: Gas estimation:", estimate);
      return estimate;
    } catch (e) {
      debug("{{this.name}}: Gas estimation failed, only sensible error is EVM error", e);
      throw new Error(CivilErrors.EvmException);
    }
  },
  async getRaw(
    {{> typed_inputs inputs=inputs}}
    {{#this.payable}}
    txData?: TransactionConfig,
    {{/this.payable}}
    {{^this.payable}}
    txData?: TransactionConfig,
    {{/this.payable}}
  ): Promise<TransactionConfig> {
      const self = this as {{contractName}}Contract;
      const options: TransactionConfig = {... txData};
      if (!isDefined(options.gas)) {
        options.gas = await self.{{name}}.estimateGasAsync(
      {{> params inputs=inputs}}
      options,
      );
      }
      options.data = self.instance.methods.{{this.name}}({{> params inputs=inputs}}).encodeABI();
      return options;
  },
};